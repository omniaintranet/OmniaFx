import{_ as e,r as p,o,e as c,f as n,c as l,F as i,g as a,a as s}from"./app.a39ec552.js";const u={},r=a(`<h1 id="call-a-web-api" tabindex="-1"><a class="header-anchor" href="#call-a-web-api" aria-hidden="true">#</a> Call a Web API</h1><p>Time to say <strong>Hello to an Omnia Fx Web API</strong>.</p><p>In this part of the tutorial, you will make a client-side component call to a Web API and then display a response message.</p><blockquote><p>Note: The following example will build upon what we have done in <a href="../create-extension#create-an-extension">Create an extension</a>, so make sure you&#39;ve been through it.</p></blockquote><blockquote><p><a href="../../../../src/tutorials/first-extension/call-web-api">Sample Source Code</a></p></blockquote><h1 id="step-1-create-a-controller" tabindex="-1"><a class="header-anchor" href="#step-1-create-a-controller" aria-hidden="true">#</a> Step 1. Create a controller</h1><p>Create a new folder called <code>Controllers</code> under <code>..\\HelloOmniaFx.Web\\</code>.</p><p>Inside the newly created folder, create a new item of typ <code>API Controller Class</code> with the name <code>TestController</code>.</p><p>Add a GET method in the controller</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Authorization</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Mvc</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">HelloOmniaFx<span class="token punctuation">.</span>Web<span class="token punctuation">.</span>Controllers</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;api/test&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ApiController</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ControllerBase</span></span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span>
        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Authorize</span></span><span class="token punctuation">]</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token interpolation-string"><span class="token string">$&quot;Hello </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">name</span><span class="token punctuation">}</span></span><span class="token string">, nice to meet you. I am Omnia Fx Web API&quot;</span></span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h1 id="step-2-call-the-web-api" tabindex="-1"><a class="header-anchor" href="#step-2-call-the-web-api" aria-hidden="true">#</a> Step 2. Call the Web API</h1><p>Open the file <code>HelloOmniaFxComponent.tsx</code>.</p><p>Inject a HttpClient instance</p><div class="language-tsx ext-tsx line-numbers-mode"><pre class="language-tsx"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">HelloOmniaFxComponent</span> <span class="token keyword">extends</span> <span class="token class-name">VueComponentBase</span> <span class="token keyword">implements</span> <span class="token class-name">IWebComponentInstance</span><span class="token punctuation">,</span> IHelloOmniaFxComponent <span class="token punctuation">{</span>

    <span class="token comment">//Inject HttpClient</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Inject</span></span><span class="token operator">&lt;</span>HttpClientConstructor<span class="token operator">&gt;</span><span class="token punctuation">(</span>HttpClient<span class="token punctuation">,</span> <span class="token punctuation">{</span>
        configPromise<span class="token operator">:</span> HttpClient<span class="token punctuation">.</span><span class="token function">createOmniaServiceRequestConfig</span><span class="token punctuation">(</span><span class="token string">&#39;[web-service-id]&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">private</span> httpClient<span class="token operator">:</span> HttpClient<span class="token punctuation">;</span>


    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><blockquote><p>Note: Replace <code>[web-service-id]</code> with the guid defined in registerManifest in the <code>omnia.service.ts</code> file.</p></blockquote>`,15),k=s("Tip: Use the built-in "),d={href:"https://docs.microsoft.com/en-us/visualstudio/ide/quick-actions?view=vs-2019#to-see-a-light-bulb-or-screwdriver",target:"_blank",rel:"noopener noreferrer"},b=s("Quick Actions"),m=s(" in Visual Studio to automatically import required modules from omnia fx npm. Tip: If Quick Actions can't help you with the needed imports, you can always check the source code of the sample project."),g=a(`<p>Add new properties and function:</p><div class="language-tsx ext-tsx line-numbers-mode"><pre class="language-tsx"><code><span class="token keyword">private</span> name <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> responseMsg <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> waiting <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token function">callWebAPI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>waiting <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>httpClient<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;/api/test?name=&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>waiting <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>responseMsg <span class="token operator">=</span> response<span class="token punctuation">.</span>data
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>Update the render function:</p><div class="language-tsx ext-tsx line-numbers-mode"><pre class="language-tsx"><code><span class="token function">render</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>HelloOmniaFxComponentClasses<span class="token punctuation">.</span>container<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>text-xs-center<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">&lt;v-text-field label=&quot;Name&quot; v-model=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token plain-text">&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>v-text-field</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">&lt;v-btn flat loading=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>waiting<span class="token punctuation">}</span><span class="token plain-text"> onClick=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>callWebAPI<span class="token punctuation">}</span><span class="token plain-text">&gt;Send</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>v-btn</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">&lt;p&gt;</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>responseMsg<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h1 id="step-3-test-the-result" tabindex="-1"><a class="header-anchor" href="#step-3-test-the-result" aria-hidden="true">#</a> Step 3. Test the result</h1><p>Build and run the project.</p><p>Enter your name in the text box, and click the send button.</p><p>Wow, your solution has got a backend up and running!</p><h1 id="next-part" tabindex="-1"><a class="header-anchor" href="#next-part" aria-hidden="true">#</a> Next Part</h1><ul><li><a href="../create-admin-journey#create-an-admin-journey">Create an Admin Journey</a></li></ul>`,10);function h(x,w){const t=p("ExternalLinkIcon");return o(),c(i,null,[r,n("blockquote",null,[n("p",null,[k,n("a",d,[b,l(t)]),m])]),g],64)}var v=e(u,[["render",h],["__file","index.html.vue"]]);export{v as default};
