import{_ as t,r as o,o as p,e as l,f as n,c as i,F as c,g as e,a}from"./app.a39ec552.js";const r={},u=e(`<h1 id="create-an-extension" tabindex="-1"><a class="header-anchor" href="#create-an-extension" aria-hidden="true">#</a> Create an extension</h1><p>Time to say <strong>Hello to Omnia Fx</strong>.</p><p>In this part of the tutorial, you will create a simple extension that consists of a client-side component showing <code>Hello from Omnia Fx</code>. You will learn how to run and test the code locally.</p><blockquote><p>Tip: Please make sure you have installed all <a href="../../prerequisites#prerequisites">prerequisites</a>.</p></blockquote><blockquote><p>Tip: Please make sure there are no white space in the relevant folder names.</p></blockquote><blockquote><p><a href="../../../../src/tutorials/first-extension/create-extension">Sample Source Code</a></p></blockquote><h1 id="step-1-create-an-extension" tabindex="-1"><a class="header-anchor" href="#step-1-create-an-extension" aria-hidden="true">#</a> Step 1. Create an extension</h1><h2 id="install-the-latest-templates" tabindex="-1"><a class="header-anchor" href="#install-the-latest-templates" aria-hidden="true">#</a> Install the latest templates</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>omnia dev new --install 6.0.0
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>Tip: You only need to run this command once in your development environment as long as you want to develop for this version. If you need to use another version, you need to run the command for that specific version.</p></blockquote>`,10),d=a("Tip: For more information about different versions of the templates, please visit "),m={href:"https://github.com/preciofishbone/omniaclitemplates",target:"_blank",rel:"noopener noreferrer"},h=a("Omnia Cli Templates"),b=e(`<h2 id="create-a-new-extension-project-using-template" tabindex="-1"><a class="header-anchor" href="#create-a-new-extension-project-using-template" aria-hidden="true">#</a> Create a new extension project using template</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>omnia dev new extension --name web=HelloOmniaFx.Web
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>Tip: The project will be created at the current path running the cmd.</p></blockquote><h1 id="step-2-generate-appsettings-local-json-file" tabindex="-1"><a class="header-anchor" href="#step-2-generate-appsettings-local-json-file" aria-hidden="true">#</a> Step 2. Generate appsettings.local.json file</h1><p>The appsettings.local.json file contains all information you need to run your extension locally and test the code in a specific tenant.</p><blockquote><p>Note: You need to login to the Omnia Cloud with a valid account. Make sure the tenant you want to generate an app settings file for have dev intent.</p></blockquote><p>Get your <code>tenant-id</code></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>omnia tenants list
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Generate appsettings.local.json</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>omnia dev appsettings get --path C:\\your-hello-omnia-fx-path\\extension.json --tenantid {tenant-id}
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Or</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>omnia dev appsettings get --path extension.json --tenantid {tenant-id}
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h1 id="step-3-create-a-new-vue-based-web-component" tabindex="-1"><a class="header-anchor" href="#step-3-create-a-new-vue-based-web-component" aria-hidden="true">#</a> Step 3. Create a new Vue-based Web Component</h1><p>Create a new folder called <code>components</code> under <code>..\\HelloOmniaFx.Web\\client\\</code>.</p><p>Inside the newly created folder, run the following cmd:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>omnia dev new vuewebcomponent --name HelloOmniaFxComponent --tokens element=hello-omnia-fx-component
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h1 id="step-4-open-your-project-in-visual-studio-2019" tabindex="-1"><a class="header-anchor" href="#step-4-open-your-project-in-visual-studio-2019" aria-hidden="true">#</a> Step 4. Open your project in visual studio 2019</h1><p>Open <code>HelloOmniaFxComponent.tsx</code> and modify the <code>render</code> function</p><div class="language-tsx ext-tsx line-numbers-mode"><pre class="language-tsx"><code><span class="token function">render</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>HelloOmniaFxComponentClasses<span class="token punctuation">.</span>container<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            Hello from Omnia Fx
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Build and run the project.</p><h1 id="step-5-serve-the-extension-locally" tabindex="-1"><a class="header-anchor" href="#step-5-serve-the-extension-locally" aria-hidden="true">#</a> Step 5. Serve the extension locally</h1><p>Open a browser and browse to your Omnia Developing tenant.</p><blockquote><p>Tip: You can find the url to browse to by looking at the information in your appsettings.local.json file (e.g. <code>domain-something.omniacloud.net</code>)</p></blockquote><p>When the site is loaded, press <code>Shift + O</code> then <code>Shift + C</code> to open the <code>Omnia Developer Console</code>, then run the following cmd to serve your extension locally:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>serve https://localhost:44351
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>Tip: The default port for the project created by the template is 44351. Feel free to change the port to a new unique value on your machine if needed.</p></blockquote><p>The browser will be reloaded after serving successfully.</p><p>You can verify the serve status by running the following cmd in the <code>Omnia Developer Console</code>:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>serve --list
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h1 id="step-6-test-the-component" tabindex="-1"><a class="header-anchor" href="#step-6-test-the-component" aria-hidden="true">#</a> Step 6. Test the component</h1><h2 id="for-testing-purpose-only-you-will-make-the-component-automatically-render-itself-as-full-screen-on-the-browser" tabindex="-1"><a class="header-anchor" href="#for-testing-purpose-only-you-will-make-the-component-automatically-render-itself-as-full-screen-on-the-browser" aria-hidden="true">#</a> For testing purpose only, you will make the component automatically render itself as full screen on the browser.</h2><p>Open the <code>HelloOmniaFxComponent.manifest.ts</code> and add the load rules:</p><div class="language-tsx ext-tsx line-numbers-mode"><pre class="language-tsx"><code><span class="token punctuation">.</span><span class="token function">registerWebComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    elementName<span class="token operator">:</span> <span class="token string">&quot;hello-omnia-fx-component&quot;</span><span class="token punctuation">,</span>
    entryPoint<span class="token operator">:</span> <span class="token string">&quot;./HelloOmniaFxComponent.tsx&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//load rule to load this manifest after page load</span>
<span class="token punctuation">.</span><span class="token function">withLoadRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">loadByUrlMatching</span><span class="token punctuation">(</span><span class="token punctuation">{</span>startsWith<span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Open the <code>HelloOmniaFxComponent.tsx</code> and modify the <code>registerElement</code> logic at the end of the file:</p><div class="language-tsx ext-tsx line-numbers-mode"><pre class="language-tsx"><code>WebComponentBootstrapper<span class="token punctuation">.</span><span class="token function">registerElement</span><span class="token punctuation">(</span><span class="token punctuation">(</span>manifest<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">vueCustomElement</span><span class="token punctuation">(</span>manifest<span class="token punctuation">.</span>elementName<span class="token punctuation">,</span> HelloOmniaFxComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//component injects itself into document body</span>
    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>manifest<span class="token punctuation">.</span>elementName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Open the <code>HelloOmniaFxComponent.css.ts</code> and modify the <code>container</code> styles:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>StyleFlow<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span>HelloOmniaFxComponentStyles<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    container<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">//Full screen styles</span>
        position<span class="token operator">:</span> <span class="token string">&#39;absolute&#39;</span><span class="token punctuation">,</span>
        top<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        bottom<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        left<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        right<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        background<span class="token operator">:</span> <span class="token string">&#39;white&#39;</span><span class="token punctuation">,</span>
        color<span class="token operator">:</span> <span class="token string">&#39;black&#39;</span><span class="token punctuation">,</span>
        zIndex<span class="token operator">:</span> <span class="token number">9999</span><span class="token punctuation">,</span>
        justifyContent<span class="token operator">:</span> <span class="token string">&#39;center&#39;</span><span class="token punctuation">,</span>
        alignItems<span class="token operator">:</span> <span class="token string">&#39;center&#39;</span><span class="token punctuation">,</span>
        display<span class="token operator">:</span> <span class="token string">&#39;flex&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>Rebuild and run the project, then refresh the browser.</p><p>Cool, you&#39;ve got your first component in Omnia up and running!</p><h1 id="next-part" tabindex="-1"><a class="header-anchor" href="#next-part" aria-hidden="true">#</a> Next Part</h1><ul><li><a href="../call-web-api#call-a-web-api">Call a Web API</a></li></ul>`,41);function k(g,x){const s=o("ExternalLinkIcon");return p(),l(c,null,[u,n("blockquote",null,[n("p",null,[d,n("a",m,[h,i(s)])])]),b],64)}var v=t(r,[["render",k],["__file","index.html.vue"]]);export{v as default};
