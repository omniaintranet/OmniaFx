import{_ as e,g as a}from"./app.a39ec552.js";const n={},s=a(`<h1 id="create-a-timer-job" tabindex="-1"><a class="header-anchor" href="#create-a-timer-job" aria-hidden="true">#</a> Create a Timer Job</h1><p>So far in this tutorial, you have created a Web App service <code>HelloOmniaFx.Web</code> that serves UI resources and APIs.</p><p>In this part of tutorial, you will create a Worker service <code>HelloOmniaFx.Worker</code> that run a Timer Job.</p><h1 id="step-1-create-a-worker-service" tabindex="-1"><a class="header-anchor" href="#step-1-create-a-worker-service" aria-hidden="true">#</a> Step 1. Create a worker service</h1><p>Create worker:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>omnia dev new worker -n HelloOmniaFx.Worker -o C:\\your-hello-omnia-fx-path\\extension.json
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Generate appsettings.local.json:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>omnia dev appsettings get --path C:\\your-hello-omnia-fx-path\\extension.json --tenantid {tenant-id}
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h1 id="step-2-create-a-timer-job-in-worker" tabindex="-1"><a class="header-anchor" href="#step-2-create-a-timer-job-in-worker" aria-hidden="true">#</a> Step 2. Create a Timer Job in worker</h1><p>Create a new folder called <code>TimerJobs</code> under <code>..\\HelloOmniaFx.Worker\\</code>.</p><p>Inside the newly created folder, run the following cmd:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>omnia dev new timerjob --name HelloOmniaFxTimerJob
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>A new .cs file will be created at <code>..\\HelloOmniaFx.Worker\\TimerJobs\\HelloOmniaFxTimerJob.cs</code>.</p><p>Follow the instruction written in <code>HelloOmniaFxTimerJob.cs</code>:</p><ul><li>Update the namespace of the file.</li></ul><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">namespace</span> HelloOmniaFx<span class="token punctuation">.</span>Worker<span class="token punctuation">.</span>TimerJobs
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>Add the configuration code in <code>..\\HelloOmniaFx.Worker\\Program.cs</code>.</li></ul><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>hostbuilder<span class="token punctuation">.</span><span class="token function">ConfigureServices</span><span class="token punctuation">(</span>serviceCollection <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    serviceCollection<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddHostedService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>HelloOmniaFxTimerJob<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h1 id="step-3-run-it" tabindex="-1"><a class="header-anchor" href="#step-3-run-it" aria-hidden="true">#</a> Step 3. Run it</h1><p>Build and start the worker.</p><p>Try to debug it.</p><p>Enjoy!</p><h1 id="next-part" tabindex="-1"><a class="header-anchor" href="#next-part" aria-hidden="true">#</a> Next Part</h1><ul><li><a href="../create-feature#create-a-feature">Create a feature</a></li></ul>`,24);function t(r,i){return s}var c=e(n,[["render",t],["__file","index.html.vue"]]);export{c as default};
