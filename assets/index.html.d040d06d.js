import{_ as e,g as s}from"./app.a39ec552.js";const n={},a=s(`<h1 id="identity-user-group" tabindex="-1"><a class="header-anchor" href="#identity-user-group" aria-hidden="true">#</a> Identity (User/Group)</h1><h2 id="class-model" tabindex="-1"><a class="header-anchor" href="#class-model" aria-hidden="true">#</a> Class/Model</h2><p>There are 2 base class/model in Omnia system: <strong>Identity</strong> and <strong>ResolvedIdentity</strong></p><ul><li><p><strong>Identity</strong> is a light model contains only <code>uid</code> and <code>type</code> for identifying/resolving a user or a group. This is also an input/ouput of people-picker (client-side) so that it is recommended to use this data model for storage.</p></li><li><p><strong>ResolvedIdentity</strong> is a full model that could be resolve from an <strong>Identity</strong>.</p></li></ul><p><img src="https://user-images.githubusercontent.com/17378364/112411280-3a00dd00-8d4f-11eb-8dae-8286cfc39d97.png" alt="image"></p><p>In server-side code, it is always able to check/cast to a proper derived class from a base. For example</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name">ResolvedUser</span> currentUser <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>UserService<span class="token punctuation">.</span><span class="token function">GetCurrentUserAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>currentUser <span class="token keyword">is</span> <span class="token class-name">AzureAdUser</span> azureAdUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//retrieves azure ad user properties</span>
    azureAdUser<span class="token punctuation">.</span>DisplayName<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><hr><h2 id="services" tabindex="-1"><a class="header-anchor" href="#services" aria-hidden="true">#</a> Services</h2><p>On server-side, we can use <code>Omnia.Fx.Users.IUserService</code> to resolve identity, which can also be done by <code>import { UserStore } from &#39;@omnia/fx&#39;</code> on client-side.</p><p>For more about particular AzureAd-Identity, you can look at <code>Omnia.Fx.AzureAd.IAzureAdService</code> or <code>import { AzureAdStore } from &#39;@omnia/fx&#39;</code></p>`,11);function t(r,o){return a}var c=e(n,[["render",t],["__file","index.html.vue"]]);export{c as default};
